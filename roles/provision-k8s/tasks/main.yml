---
# tasks file for roles/common
# load required modules
- name: Add the reqiured modules
  modprobe:
    name: "{{ item }}"
    state: present
  loop:
    - br_netfilter
    - overlay

# Disable Swap
- name: disable swap
  command: swapoff -av

# Set ip forwarding on in /proc and in the sysctl file and reload if necessary
- sysctl:
    name: "{{ item }}"
    value: '1'
    sysctl_set: yes
    state: present
    reload: yes
  loop:
    - net.ipv4.ip_forward
    - net.bridge.bridge-nf-call-iptables
    - net.bridge.bridge-nf-call-ip6tables

- name: Ubuntu Specific Changes
  block:
  # disable firewall
  - name: disable UFW
    ufw:
      state: disabled

# Add specified repository into sources list using specified filename.
  - apt_repository:
      repo: deb "{{ item }}" /
      state: present
      update_cache: false
      filename: crio.repo
    loop:
      - "{{ LIBCONTAINERS_REPO }}"
      - "{{ CRIO_REPO }}"

  - name: Add CRIO and K8s apt keys
    apt_key:
      url:  "{{ item }}"
      state: present
    loop:
      - "{{ CRIO_REPO }}/Release.key"
      - "{{ LIBCONTAINERS_REPO }}/Release.key"
      - "{{ K8S_KEY }}"
      #- "{{ CRIO_REPO }}cri-o:/{{ CRIO_VERSION }}/{{ OS }}/Release.key"
      #- "{{ CRIO_REPO }}{{ OS }}/Release.key"

  # Install CRIO packages
  - name: Install CRIO and COMMON packages
    apt:
      name: "{{ item }}"  
      update_cache: true
    loop:
      - "{{ CRIO_PACKAGES }}"
      - "{{ COMMON_PACKAGES }}"
  when: ansible_distribution == "Ubuntu"

- name: RedHat / Centos Specific Changes
  block:
  # disable firewall
  - name: disable firewalld 
    systemd:
      name: firewalld
      enabled: false
      state: stopped

# Add specified repository into sources list using specified filename.
  - name: Add Repo
    get_url:
      url: "{{ item }}"
      dest: "{{ CENTOS_REPO_PATH }}/{{ item | basename }}"
    loop:
      - "{{ CENTOS_LIBCONTAINERS_REPO }}"
      - "{{ CENTOS_CRIO_REPO }}"

  # Install CRIO packages
  - name: Install CRIO and COMMON packages
    yum:
      name: "{{ CRIO_PACKAGE }}"
      update_cache: true

  - name: Create directory for CGROUP file
    file:
      state: directory
      name: "{{ CGROUP_PATH }}"

  - name: Disable SELinux
    selinux:
      state: disabled


  when: ansible_distribution == "CentOS" or ansible_distribution == "RedHat"

# Copy CGROUP File for CRI-O to host
- name: Copy CGGROUP file to host
  copy:
    src: "{{ CGROUP_FILE }}"
    dest: "{{ CGROUP_PATH}}{{ CGROUP_FILE }}"

- name: Issue daemon-reload and start CRIO
  systemd:
    state: started
    daemon_reload: yes
    name: crio
    enabled: true


- name: Download CRI-O tools
  unarchive:
    src: "{{ item }}"
    dest: /usr/local/bin
    remote_src: yes
  loop:
    - "{{ CRICTL_PACKAGE }}"
    - "{{ CRITEST_PACKAGE }}"

# Copy K8s repo file to host 
- name: Copy K8s file to host
  copy:
    src: "{{ K8S_REPO }}"
    dest: "{{ APT_REPO_PATH}}{{ K8S_REPO }}"
  when: ansible_distribution == "Ubuntu"

- name: Copy K8s file to host
  copy:
    src: "{{ CENTOS_K8S_REPO }}"
    dest: "{{ CENTOS_REPO_PATH }}{{ CENTOS_K8S_REPO }}"
  when: ansible_distribution == "CentOS" or ansible_distribution == "RedHat"

# Install K8s  packages
- name: Install K8s packages
  package:
    name: "{{ item }}"  
  loop:
    - "{{ K8S_PACKAGES }}"

# Prevent K8S from being upgraded.
- name: Set K8s on hold
  command: apt-mark hold "{{ K8S_PACKAGES }}"
  when: ansible_distribution == "Ubuntu"

# Restart CRI-O
- name: Issue daemon-reload and reload CRIO
  systemd:
    state: restarted
    daemon_reload: yes
    name: crio

# Need to install K8S using kubeadm
- name: Install K8s on Master
  block:
    - name: Install K8s
      command: kubeadm init --apiserver-advertise-address={{ ansible_default_ipv4.address }}

    - name: Generate K8s join command to use on worker nodes
      command: kubeadm token create --print-join-command
      register: kube_join_command

    - debug: 
        var: kube_join_command.stdout_lines

    - name: Create a .kube directory if it does not exist
      file:
        path: "{{ ansible_env.HOME }}/.kube"
        state: directory
        mode: '0755'


    # Setup kube config file
    - name: Copy kubeconfig file on the remote machine to the HOME dir
      copy:
        src: "{{ K8S_CONFIG }}"
        dest: "{{ ansible_env.HOME }}/.kube/config"
        owner: "{{ ansible_env.USER }}"
        group: "{{ ansible_effective_group_id }}"
        remote_src: yes

    - name: Configure kubectl bash completion
      copy:
        src: "{{ K8S_COMP_FILE }}"
        dest: "{{ ansible_env.HOME}}/.kube/{{ K8S_COMP_FILE }}"

    - name: Update Bash profile with kubectl bash completion
      lineinfile:
        path: "{{ ansible_env.HOME }}/.bash_profile"
        line: "source '{{ ansible_env.HOME }}/.kube/completion.bash.inc'"
        create: yes

    - name: Configure CNI from "{{ CNI }}"
      command: kubectl create -f "{{ CNI }}" 

    - name: Remove Taint from K8s Master
      command: "{{ NO_TAINT }}" 
  when: ansible_hostname == "k8s-master"
  #### Need to add joining additional masters lol
- name: Join K8s workers to Master
  block:
    - name: Join to Master 
      command: "{{ kube_join_command }}"

  when: ansible_hostname != "k8s-master"

- name: Update registery file
  replace:
    path: /etc/crio/crio.conf
    regexp: '^#registries = \['
    replace: 'registries = [ "docker.io", "quay.io", "registry.fedoraproject.org", "registry.opensuse.org" ]'
    # "path=/etc/crio/crio.conf regexp='^#registries = \[' replace='registries = [ \"docker.io\", \"quay.io\", \"registry.fedoraproject.org\", \"registry.opensuse.org\" ]'"

# Restart CRI-O
- name: Issue daemon-reload and reload CRIO
  systemd:
    state: restarted
    daemon_reload: yes
    name: crio

