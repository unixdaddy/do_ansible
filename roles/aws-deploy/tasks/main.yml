---
# tasks file for aws-deploy
# Basic provisioning example
- amazon.aws.ec2:
    key_name: "{{ key }}"
    instance_type: "{{ size }}"
    image: "{{ image }}"
    aws_access_key:  "{{ lookup('env','AWS_ACCESS_KEY_ID') }}" 
    aws_secret_key: "{{ lookup('env','AWS_SECRET_ACCESS_KEY') }}" 
    region: "{{ region }}"
    group: "{{ group }}"
    wait: yes
    instance_tags:
      Name:  "{{hostvars[item].inventory_hostname}}"
    #group: webserver
    #count: 3
    #vpc_subnet_id: subnet-29e63245
    #assign_public_ip: yes
  with_inventory_hostnames:
    - master
    - worker
  register: instance_info

#- debug:
#   var: instance_info.results.instance_ids

- name: debug
  debug:
#      msg: "{{ item.value.name }}  {{item.value.state}} {{item.value.image}} {{item.value.flavor}} {{item.value.key_name}} {{item.value.security_group}} {{item.value.meta[0].group}} {{item.value.meta[0].deployment_name}}"
    msg: "{{ item.instances[0].tags.Name }} {{ item.instances[0].public_ip }}"
  loop: "{{ instance_info.results }}"

- name: Wait for port 22 to become open on the host, don't start checking for 30 seconds
  # both wait_for and wait_for_connection work with the right delay/timeout
  #wait_for_connection:
  #  delay: 60
  #  timeout: 300
  wait_for:
    host: "{{ item.instances[0].public_ip }}"
    port: 22
    delay: 30
    timeout: 300
  loop: "{{ instance_info.results }}"



- name: Add host to group 'master'
  add_host:
  #  name: '{{ item.instances[0].dns_name }}'
    name: '{{ item.instances[0].tags.Name }}'
    ansible_ssh_host: '{{ item.instances[0].public_ip }}'
    groups: master
  when: item.instances[0].tags.Name.find("master") != -1
  loop: "{{ instance_info.results }}"
- name: Add host to group 'worker'
  add_host:
   #name: '{{ item.instances[0].dns_name }}'
    name: '{{ item.instances[0].tags.Name }}'
    ansible_ssh_host: '{{ item.instances[0].public_ip }}'
    groups: worker
  when: item.instances[0].tags.Name.find("master") == -1
  loop: "{{ instance_info.results }}"

- name: Set k8s-master as a fact to be used in provisioning
  set_fact:
     master: '{{ item.instances[0].tags.Name }}'
     cacheable: yes
  when: item.instances[0].tags.Name.find("master") != -1
  loop: "{{ instance_info.results }}"

- name: debug
  debug:
    msg: "{{ master }}"
  loop: "{{ instance_info.results }}"

